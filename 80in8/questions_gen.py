import re
from fractions import Fraction

import ast
import operator as op

import random
from random import randint

from formulas_db import SIMPLE_ARITHMETIC_FORMULAS, FRACTIONS_FORMULAS, MIXED_OPERATIONS_FORMULAS, LARGER_NUMBERS_FRACTIONS_FORMULAS


# Enhanced function to handle equations
def enhanced_solve_equation(equation):
    """
    Solves a mathematical equation provided as a string with better handling of fractions and divisions.
    Supports basic arithmetic operations and handles both integers and fractions.
    """
    # Operators
    operators = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul, ast.Div: op.truediv}

    def eval_(node):
        if isinstance(node, ast.Num):  # <number>
            return node.n
        elif isinstance(node, ast.BinOp):  # <left> <operator> <right>
            return operators[type(node.op)](eval_(node.left), eval_(node.right))
        elif isinstance(node, ast.Expression):
            return eval_(node.body)
        else:
            raise TypeError(node)

    # Parse equation and evaluate
    try:
        node = ast.parse(equation, mode='eval')
        return eval_(node.body)
    except Exception as e:
 
 
        return str(e)


# Function to generate alternative options for the answer
def generate_options(answer):
    """
    Generates three alternative options for a given answer.
    The alternatives are generated by adding or subtracting a small random integer
    or fraction from the answer.
    """
    alternatives = set()
    while len(alternatives) < 3:
        change = Fraction(randint(-10, 10), randint(1, 10))
        alt = answer + change
        if alt != answer and alt >= 0:
            alternatives.add(round(float(alt),2) if isinstance(alt, Fraction) else alt)
    return list(alternatives)


def generate_questions():
    questions = []

    # sample 20 questions from each category
    for category in [SIMPLE_ARITHMETIC_FORMULAS, FRACTIONS_FORMULAS, MIXED_OPERATIONS_FORMULAS, LARGER_NUMBERS_FRACTIONS_FORMULAS]:
        for eq in random.sample(category, 20):
            answer = enhanced_solve_equation(eq)
            options = generate_options(answer)
            options.append(answer)
            random.shuffle(options)
            questions.append({"equation": eq, "answer": answer, "options": options})

    return questions



if __name__ == '__main__':

    from pprint import pprint

    questions = generate_questions()
    for q in questions:
        pprint(q)